# Generated by Django 4.2.8 on 2023-12-22 10:38

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Custom_UOM',
            fields=[
                ('UOM', models.CharField(max_length=20, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
        ),
        migrations.CreateModel(
            name='GroupedItems',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('grouped_item', models.CharField(max_length=30, unique=True)),
                ('total_units', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('total', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('used_units', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('units_available', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
            ],
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='sqlserverconn',
            fields=[
                ('Item_id', models.BigAutoField(db_column='Item_id', primary_key=True, serialize=False)),
                ('Item', models.CharField(db_column='Item', db_index=True, max_length=30)),
                ('Item_Description', models.CharField(blank=True, max_length=30, null=True)),
                ('Units', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('Unit_of_measurement', models.CharField(blank=True, max_length=15, null=True)),
                ('Unit_cost', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('Date', models.DateField()),
                ('Subtotal', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('grouped_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sqlserverconns', to='app.groupeditems')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.tenant')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.CharField(max_length=20)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.tenant')),
            ],
        ),
        migrations.CreateModel(
            name='Labour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('labour_type', models.CharField(max_length=20)),
                ('NOL', models.PositiveIntegerField()),
                ('Date', models.DateField(default=django.utils.timezone.now)),
                ('labourer_cost', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('sub_total', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.tenant')),
            ],
        ),
        migrations.CreateModel(
            name='IssueItem',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('units_issued', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('units_returned', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('units_used', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
                ('Date', models.DateField(default=django.utils.timezone.now)),
                ('grouped_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issue_items', to='app.groupeditems')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.person')),
            ],
        ),
        migrations.AddIndex(
            model_name='groupeditems',
            index=models.Index(fields=['grouped_item', 'total_units'], name='grouped_item_total_units_idx'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.tenant'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='sqlserverconn',
            index=models.Index(fields=['Item'], name='item_idx'),
        ),
    ]
